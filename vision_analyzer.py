"""
Analyseur de vision pour les sch√©mas √©lectriques
Utilise OpenAI GPT-4 Vision pour analyser les images de sch√©mas
"""
import streamlit as st
import base64
from typing import Dict, Optional
import requests
import json

class VisionAnalyzer:
    """Analyseur de sch√©mas √©lectriques utilisant l'IA Vision"""
    
    def __init__(self):
        """Initialise l'analyseur de vision"""
        self.openai_client = None
        self.api_key = None
        self._initialize_client()
    
    def _initialize_client(self):
        """Initialise le client OpenAI si disponible"""
        try:
            # Essayer de r√©cup√©rer la cl√© depuis les secrets Streamlit
            if hasattr(st, 'secrets') and 'openai' in st.secrets:
                self.api_key = st.secrets['openai']['api_key']
            elif 'OPENAI_API_KEY' in st.session_state:
                self.api_key = st.session_state['OPENAI_API_KEY']
            
            if self.api_key:
                try:
                    import openai
                    self.openai_client = openai.OpenAI(api_key=self.api_key)
                except ImportError:
                    st.warning("Module OpenAI non disponible. L'analyse de sch√©mas sera limit√©e.")
        except Exception as e:
            st.warning(f"Impossible d'initialiser OpenAI: {e}")
    
    def get_cost_estimate(self, num_schemas: int) -> str:
        """Estime le co√ªt d'analyse des sch√©mas
        
        Args:
            num_schemas: Nombre de sch√©mas √† analyser
            
        Returns:
            Estimation des co√ªts en texte
        """
        if not self.api_key:
            return "Configuration OpenAI requise pour l'estimation des co√ªts"
        
        # Co√ªt approximatif : ~0.01‚Ç¨ par sch√©ma avec GPT-4 Vision
        cost_per_schema = 0.01
        total_cost = num_schemas * cost_per_schema
        
        if total_cost < 0.05:
            return f"üìä Co√ªt estim√© : N√©gligeable (< 5 centimes pour {num_schemas} sch√©ma{'s' if num_schemas > 1 else ''})"
        else:
            return f"üìä Co√ªt estim√© : ~{total_cost:.2f}‚Ç¨ pour {num_schemas} sch√©ma{'s' if num_schemas > 1 else ''}"
    
    def analyze_electrical_schema(self, image_base64: str) -> Dict:
        """Analyse g√©n√©rale d'un sch√©ma √©lectrique
        
        Args:
            image_base64: Image encod√©e en base64
            
        Returns:
            Dictionnaire avec l'analyse du sch√©ma
        """
        if not self.openai_client:
            return {
                "success": False,
                "error": "Client OpenAI non configur√©. Veuillez configurer votre cl√© API OpenAI.",
                "analysis": "‚ö†Ô∏è Analyse non disponible sans OpenAI GPT-4 Vision"
            }
        
        try:
            prompt = """Tu es un expert en sch√©mas √©lectriques industriels. Analyse ce sch√©ma et fournis :

1. **Type de sch√©ma** : Puissance, commande, c√¢blage, etc.
2. **Composants identifi√©s** : Contacteurs, relais, moteurs, capteurs, etc.
3. **Fonction principale** : Que contr√¥le ce sch√©ma ?
4. **Points d'attention** : √âl√©ments importants pour la maintenance
5. **Zones critiques** : Parties sensibles aux pannes

Sois pr√©cis et technique, comme pour un technicien de maintenance."""

            response = self.openai_client.chat.completions.create(
                model="gpt-4-vision-preview",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": prompt},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_base64}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=1000,
                temperature=0.1
            )
            
            analysis = response.choices[0].message.content
            
            return {
                "success": True,
                "analysis": analysis,
                "type": "general_analysis"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"Erreur lors de l'analyse : {str(e)}",
                "analysis": "‚ùå Impossible d'analyser le sch√©ma"
            }
    
    def suggest_troubleshooting(self, image_base64: str, symptom: str) -> Dict:
        """Sugg√®re des solutions de d√©pannage bas√©es sur un sympt√¥me
        
        Args:
            image_base64: Image encod√©e en base64
            symptom: Description du probl√®me/sympt√¥me
            
        Returns:
            Dictionnaire avec les suggestions de d√©pannage
        """
        if not self.openai_client:
            return {
                "success": False,
                "error": "Client OpenAI non configur√©. Veuillez configurer votre cl√© API OpenAI.",
                "analysis": "‚ö†Ô∏è D√©pannage non disponible sans OpenAI GPT-4 Vision"
            }
        
        try:
            prompt = f"""Tu es un expert en maintenance industrielle. Analyse ce sch√©ma √©lectrique et le sympt√¥me rapport√©.

**SYMPT√îME RAPPORT√â** : {symptom}

Fournis un diagnostic structur√© :

1. **Diagnostic probable** : Causes les plus probables
2. **V√©rifications √† faire** : Points de mesure et contr√¥les
3. **Composants √† v√©rifier** : Dans l'ordre de probabilit√©
4. **Proc√©dure de test** : √âtapes concr√®tes de d√©pannage
5. **Solutions recommand√©es** : Actions correctives

Sois pratique et pr√©cis, comme pour guider un technicien sur site."""

            response = self.openai_client.chat.completions.create(
                model="gpt-4-vision-preview",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": prompt},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_base64}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=1200,
                temperature=0.1
            )
            
            analysis = response.choices[0].message.content
            
            return {
                "success": True,
                "analysis": analysis,
                "type": "troubleshooting",
                "symptom": symptom
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"Erreur lors du diagnostic : {str(e)}",
                "analysis": "‚ùå Impossible de diagnostiquer le probl√®me"
            }
    
    def is_available(self) -> bool:
        """V√©rifie si l'analyseur de vision est disponible
        
        Returns:
            True si OpenAI est configur√©, False sinon
        """
        return self.openai_client is not None
    
    def get_status(self) -> str:
        """Retourne le statut de configuration
        
        Returns:
            Message de statut
        """
        if self.openai_client:
            return "‚úÖ OpenAI GPT-4 Vision configur√©"
        elif self.api_key:
            return "‚ö†Ô∏è Cl√© OpenAI pr√©sente mais client non initialis√©"
        else:
            return "‚ùå OpenAI non configur√© - Analyse de sch√©mas indisponible"